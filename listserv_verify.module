<?php

/**
 * Implements hook_menu().
 *
 * @todo Add a unique url for the api
 */
function listserv_verify_menu() {
  $items['admin/config/services/listserv_verify'] = array(
    'title' => 'Listserv Verify',
    'access arguments' => array('administer listserv verify'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('listserv_verify_admin_config_form'),
    'file' => 'listserv_verify.admin.inc',
  );

  // Define a listener endpoint for the api calls.
  $items['listserv-verify/api/%'] = array(
    'page callback' => 'listserv_listserv_verify_api_confirm',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function listserv_verify_permission() {
  return array(
    'administer listserv verify' =>  array(
      'title' => t('Administer Listserv Verify'),
      'description' => t('Perform administration tasks for the listserv verify module.'),
    ),
  );
}

/**
 * Page callback for hook_menu.
 *
 * @todo Possibly check the header to find out where it's coming from.
 */
function listserv_listserv_verify_api_confirm($key) {
  // Ensure the push notification was sent to the proper URL.
  if ($key != variable_get('listserv_verify_listener_key', '')) {
    // Log the failed attempt and bail.
    watchdog('listserv_verify', 'Incoming push notification did not contain the proper URL key.', array(), WATCHDOG_WARNING);
    return;
  }

  // Check if there are any whitlisted hosts.
  $ip_whitelist = variable_get('listserv_verify_ip_whitelist', '');

  if ($ip_whitelist) {
    if ($ip_whitelist != $_SERVER['REMOTE_ADDR']) {
      echo 'ip address not authorized';
      exit;
    }
  }

  // If there is no post data then exit immediatly.
  $postdata = array();
  if (!file_get_contents("php://input") && !$_POST) {
    echo 'no post data';
    exit;
  }
  else {
    $postdata[] = $_POST;
    $postdata[] = file_get_contents("php://input");
  }

  // Find the verify keys from the post data.
  $verifykeys = _listserv_find_keys($postdata);
  $verifykeys_count = count($verifykeys);

  if ($verifykeys_count == 1) {
    $status = _listserv_verify_verify_key_status($verifykeys[0]);
    $url = _listserv_verify_find_confirmation_link($postdata);

    if ($status != 'active'){
      echo 'Key Not Active';
    }
    elseif ($status == 'active' && empty($url)) {
      echo 'Link Not Found';
    }
    // Uses HTTPRL to make an asynchronous POST call to the listserv.
    // Use 'print_r(httprl_pr($request))' to investigate the request.
    elseif ($status == 'active' && !empty($url)) {
      $options = array(
        'method' => 'POST',
        'blocking' => FALSE,
      );
      httprl_request($url, $options);
      // Execute requests.
      $request = httprl_send_request();

      // Log the action to watchdog
      watchdog('listserv_verify',
        t('Listserv confirmation link posted to @url after verifying the following key: %key'),
        array('@url' => array_shift($request)->url, '%key' => $verifykeys[0])
      );

      // Set the verify key status to inactive.
      _listserv_verify_change_verify_key_status($verifykeys[0], 'inactive');
      echo 'Confirmed';
    }
  }
  elseif ($verifykeys_count > 1) {
    watchdog('listserv_verify', 'There as more than one verify key in the last message.', array(), WATCHDOG_ERROR, 'link');
  }
  else {
    echo 'Key Not Found';
  }
}

/**
 * Implements hook_mail_alter().
 */
function listserv_verify_mail_alter(&$message) {
  $verifykey = uuid_generate();
  $message['body'][] = '<span class="verifykey">' . $verifykey . '</span>';

  // Create a record of the key and message in the database.
  _listserv_verify_record_new_entry(serialize($message), $verifykey);
}

/**
 * Helper function for saving a new record in the database.
 * @param  $message     The contents of the sent mail.
 * @param  $verifykey   The unique verify key that was generated.
 */
function _listserv_verify_record_new_entry($message, $verifykey = NULL) {
  $record = new stdClass;
  $record->created = REQUEST_TIME;
  $record->message = $message;
  $record->verifykey = $verifykey;

  drupal_write_record('listserv_verify', $record);
}


/**
 * Regexes a blob of text to find the verify key.
 *
 * @param  mixed   $haystack    The blob of text that contains the verify key.
 * @return array   $matches     An array of verify keys found.
 */
function _listserv_find_keys($haystack) {
  $keys = array();
  // Turn the array into a string
  $subject = serialize($haystack);
  // This regex pattern can be found in the UUID module.
  $regex = "/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/";
  preg_match_all($regex, $subject, $matches);
  // Remove duplicate keys. We are targeting the first instance of the array.
  $keys = array_unique($matches[0]);

  return $keys;
}

/**
 * Regexes a blob of text to find the confirmation link.
 *
 * @param  mixed   $haystack    The blob of text that contains the verify key.
 * @return array   $links       An array of confirmation links found.
 */
function _listserv_verify_find_confirmation_link($haystack) {
  $keys = array();
  // Turn the array into a string
  $subject = serialize($haystack);
  $regex = '#http\://lists\.psu\.edu/cgi\-bin/(.*)#';
  preg_match_all($regex, $subject, $matches);
  // Remove duplicate keys.
  $links = array_unique($matches[0]);

  return $links;
}

/**
 * Checks the status of the verify key.
 * @param  string   $key  The Verify Key that we are looking up in the database
 * @return                The status of the verify key. Generally will be either 'active' or 'inactive'
 */
function _listserv_verify_verify_key_status($key) {
  $result = array();

  // Find instances of listserv where the key is the same as $key
  $results = db_select('listserv_verify', 'l')
    ->fields('l')
    ->condition('l.verifykey', $key,'=')
    ->execute();

  foreach ($results as $key => $value) {
    $result[] = $value;
  }

  // We know that there will only be one unique key so we can
  // target the first result.
  if (isset($result[0])) {
    $status = $result[0]->verifykey_status;
    return $status;
  }
}

/**
 * Helper function to change the status of the verify key.
 * @param  $key       The unique verify key.
 * @param  $status    The new status you would like to set the for the key.
 */
function _listserv_verify_change_verify_key_status($key, $status) {
  $result = array();

  // Find instances of listserv where the key is the same as $key
  $results = db_select('listserv_verify', 'l')
    ->fields('l')
    ->condition('l.verifykey', $key,'=')
    ->execute();

  foreach ($results as $key => $record) {
    $record->verifykey_status = $status;
    drupal_write_record('listserv_verify', $record, 'listserv_id');
  }
}

/**
 * Helper function to return the url for the listener endpoint.
 */
function _listserv_verify_get_listener_url() {
  $url = 'listserv-verify/api/' . variable_get('listserv_verify_listener_key', '');
  return $url;
}
